import {
  require_browser_ponyfill
} from "./chunk-GAJARCMZ.js";
import {
  require_react_dom
} from "./chunk-HBQAJRNJ.js";
import {
  require_react
} from "./chunk-C7AOB6VP.js";
import {
  require_dist,
  require_dist2
} from "./chunk-2IW7EK2Q.js";
import {
  __commonJS,
  __publicField,
  __toESM
} from "./chunk-IN47U6CF.js";

// node_modules/browser-or-node/lib/index.js
var require_lib = __commonJS({
  "node_modules/browser-or-node/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
      return typeof obj;
    } : function(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
    var isBrowser2 = typeof window !== "undefined" && typeof window.document !== "undefined";
    var isNode2 = typeof process !== "undefined" && process.versions != null && process.versions.node != null;
    var isWebWorker = (typeof self === "undefined" ? "undefined" : _typeof(self)) === "object" && self.constructor && self.constructor.name === "DedicatedWorkerGlobalScope";
    var isJsDom = typeof window !== "undefined" && window.name === "nodejs" || typeof navigator !== "undefined" && (navigator.userAgent.includes("Node.js") || navigator.userAgent.includes("jsdom"));
    var isDeno2 = typeof Deno !== "undefined" && typeof Deno.version !== "undefined" && typeof Deno.version.deno !== "undefined";
    exports.isBrowser = isBrowser2;
    exports.isWebWorker = isWebWorker;
    exports.isNode = isNode2;
    exports.isJsDom = isJsDom;
    exports.isDeno = isDeno2;
  }
});

// node_modules/classnames/index.js
var require_classnames = __commonJS({
  "node_modules/classnames/index.js"(exports, module) {
    (function() {
      "use strict";
      var hasOwn = {}.hasOwnProperty;
      function classNames2() {
        var classes = [];
        for (var i = 0; i < arguments.length; i++) {
          var arg = arguments[i];
          if (!arg)
            continue;
          var argType = typeof arg;
          if (argType === "string" || argType === "number") {
            classes.push(arg);
          } else if (Array.isArray(arg)) {
            if (arg.length) {
              var inner = classNames2.apply(null, arg);
              if (inner) {
                classes.push(inner);
              }
            }
          } else if (argType === "object") {
            if (arg.toString === Object.prototype.toString) {
              for (var key in arg) {
                if (hasOwn.call(arg, key) && arg[key]) {
                  classes.push(key);
                }
              }
            } else {
              classes.push(arg.toString());
            }
          }
        }
        return classes.join(" ");
      }
      if (typeof module !== "undefined" && module.exports) {
        classNames2.default = classNames2;
        module.exports = classNames2;
      } else if (typeof define === "function" && typeof define.amd === "object" && define.amd) {
        define("classnames", [], function() {
          return classNames2;
        });
      } else {
        window.classNames = classNames2;
      }
    })();
  }
});

// node_modules/@yext/pages/dist/components/address/address.js
var React = __toESM(require_react(), 1);

// node_modules/@yext/pages/dist/components/address/i18n.js
function localeAddressFormat(locale) {
  switch (locale) {
    case "AD":
    case "AM":
    case "AT":
    case "AX":
    case "AZ":
    case "BA":
    case "BY":
    case "CY":
    case "CZ":
    case "DK":
    case "DZ":
    case "EC":
    case "EH":
    case "ET":
    case "FI":
    case "FR":
    case "GE":
    case "GF":
    case "GI":
    case "GP":
    case "GW":
    case "HT":
    case "KE":
    case "KV":
    case "KW":
    case "LA":
    case "LU":
    case "MC":
    case "MD":
    case "ME":
    case "MG":
    case "MK":
    case "MQ":
    case "MZ":
    case "NC":
    case "NL":
    case "NO":
    case "PL":
    case "PT":
    case "PY":
    case "RE":
    case "RS":
    case "SA":
    case "SE":
    case "SJ":
    case "SM":
    case "SN":
    case "TC":
    case "TJ":
    case "TM":
    case "TN":
    case "TZ":
    case "UY":
    case "VG":
    case "ZM":
      return [["line1"], ["line2"], ["postalCode", "city"], ["countryCode"]];
    case "AF":
    case "IR":
      return [
        ["line1"],
        ["line2"],
        ["city"],
        ["region"],
        ["postalCode"],
        ["countryCode"]
      ];
    case "AG":
    case "AO":
    case "AW":
    case "BJ":
    case "BO":
    case "BS":
    case "BZ":
    case "CI":
    case "CW":
    case "DJ":
    case "FJ":
    case "GA":
    case "GH":
    case "GM":
    case "GY":
    case "JM":
    case "KI":
    case "LY":
    case "MW":
    case "NA":
    case "NR":
    case "PS":
    case "QA":
    case "RW":
    case "SC":
    case "SR":
    case "SX":
    case "TG":
    case "TT":
    case "UG":
    case "VU":
      return [["line1"], ["line2"], ["city"], ["countryCode"]];
    case "AL":
    case "EE":
    case "IS":
      return [["line1"], ["line2"], ["postalCode", "city"]];
    case "AR":
      return [
        ["line1"],
        ["line2"],
        ["postalCode", "city", ",", "region"],
        ["countryCode"]
      ];
    case "AS":
    case "BB":
    case "BD":
    case "BM":
    case "BN":
    case "BT":
    case "CR":
    case "DO":
    case "FK":
    case "FM":
    case "GR":
    case "GU":
    case "JO":
    case "KZ":
    case "LB":
    case "LK":
    case "LS":
    case "MA":
    case "MH":
    case "MM":
    case "MR":
    case "MT":
    case "MV":
    case "NG":
    case "PG":
    case "PK":
    case "PR":
    case "RO":
    case "SG":
    case "VC":
    case "WS":
      return [["line1"], ["line2"], ["city", "postalCode"], ["countryCode"]];
    case "AU":
    case "CA":
    case "SZ":
    case "US":
    case "VI":
      return [
        ["line1"],
        ["line2"],
        ["city", ",", "region", "postalCode"],
        ["countryCode"]
      ];
    case "BE":
    case "PE":
      return [
        ["line1"],
        ["line2"],
        ["postalCode", "sublocality", "city"],
        ["countryCode"]
      ];
    case "BF":
    case "BI":
    case "BQ":
    case "BW":
    case "CF":
    case "CG":
    case "CM":
    case "DM":
    case "ER":
    case "GQ":
    case "KM":
    case "ML":
    case "SY":
    case "TD":
    case "ZW":
      return [["line1"], ["line2"], ["city"], ["region"], ["countryCode"]];
    case "BG":
      return [["line1"], ["postalCode", "region"], ["countryCode"]];
    case "BH":
      return [["line1"], ["line2"], ["sublocality", "city"], ["countryCode"]];
    case "BR":
      return [
        ["line1"],
        ["line2"],
        ["sublocality"],
        ["city", "region"],
        ["postalCode"],
        ["countryCode"]
      ];
    case "CH":
    case "DE":
    case "GT":
    case "IT":
    case "LI":
    case "MY":
    case "NI":
    case "OM":
    case "SK":
    case "VA":
      return [
        ["line1"],
        ["line2"],
        ["postalCode", "city", "region"],
        ["countryCode"]
      ];
    case "CL":
    case "PF":
      return [
        ["line1"],
        ["line2"],
        ["city", "postalCode", "region"],
        ["countryCode"]
      ];
    case "CN":
      return [
        ["region", "city", "sublocality"],
        ["line1"],
        ["line2"],
        ["countryCode"]
      ];
    case "CO":
    case "ID":
    case "IQ":
    case "KH":
    case "MP":
    case "NP":
    case "PW":
    case "UA":
      return [
        ["line1"],
        ["line2"],
        ["city", "region", "postalCode"],
        ["countryCode"]
      ];
    case "EG":
      return [
        ["line1"],
        ["line2"],
        ["sublocality", "city", "region", "postalCode"],
        ["countryCode"]
      ];
    case "ES":
    case "IL":
      return [
        ["line1"],
        ["line2"],
        ["city", "postalCode"],
        ["region"],
        ["countryCode"]
      ];
    case "GB":
    case "MN":
    case "ZA":
      return [
        ["line1"],
        ["line2"],
        ["sublocality", "city", "postalCode"],
        ["countryCode"]
      ];
    case "GG":
    case "IM":
    case "JE":
      return [
        ["line1"],
        ["line2"],
        ["sublocality"],
        ["city"],
        ["postalCode"],
        ["countryCode"]
      ];
    case "GN":
      return [["line1", "line2", "city"], ["countryCode"]];
    case "HK":
      return [
        ["line1"],
        ["line2"],
        ["sublocality"],
        ["city"],
        ["region"],
        ["countryCode"]
      ];
    case "HR":
      return [["line1"], ["postalCode", "city", "region"], ["countryCode"]];
    case "HU":
    case "SI":
      return [["postalCode", "city"], ["line1"], ["line2"], ["countryCode"]];
    case "IE":
      return [
        ["line1"],
        ["line2"],
        ["sublocality"],
        ["city", "region", "postalCode"],
        ["countryCode"]
      ];
    case "IN":
    case "VE":
      return [
        ["line1"],
        ["line2"],
        ["city", "postalCode"],
        ["region"],
        ["countryCode"]
      ];
    case "JP":
      return [
        ["line2"],
        ["line1", "sublocality"],
        ["city", "region"],
        ["postalCode"],
        ["countryCode"]
      ];
    case "KR":
      return [
        ["countryCode"],
        ["region", "city", "sublocality", "line1"],
        ["line2"],
        ["postalCode"]
      ];
    case "KY":
      return [["line1"], ["line2"], ["postalCode"], ["countryCode"]];
    case "LT":
      return [
        ["line1"],
        ["postalCode", "city", "sublocality", "region"],
        ["countryCode"]
      ];
    case "LV":
      return [["line1"], ["city", ",", "postalCode"], ["countryCode"]];
    case "MO":
      return [["line1"], ["line2"], ["sublocality"], ["city"], ["countryCode"]];
    case "MU":
      return [
        ["line1"],
        ["line2"],
        ["city"],
        ["region", "postalCode"],
        ["countryCode"]
      ];
    case "MX":
      return [
        ["line1"],
        ["line2"],
        ["sublocality"],
        ["postalCode", "city", ",", "region"],
        ["countryCode"]
      ];
    case "NE":
    case "SD":
      return [
        ["line1"],
        ["line2"],
        ["postalCode"],
        ["city"],
        ["region"],
        ["countryCode"]
      ];
    case "NZ":
      return [
        ["line1"],
        ["line2"],
        ["sublocality"],
        ["city"],
        ["postalCode"],
        ["countryCode"]
      ];
    case "PH":
    case "TW":
    case "VN":
      return [
        ["line1"],
        ["line2"],
        ["sublocality", "city"],
        ["region", "postalCode"],
        ["countryCode"]
      ];
    case "RU":
      return [["line1"], ["line2"], ["city"], ["postalCode"], ["countryCode"]];
    case "SB":
    case "SL":
    case "ST":
    case "TL":
    case "TO":
    case "TV":
      return [["line1"], ["line2"], ["city", ",", "region"], ["countryCode"]];
    case "TH":
    case "TR":
      return [
        ["line1"],
        ["line2"],
        ["sublocality"],
        ["postalCode", "city"],
        ["countryCode"]
      ];
    case "UZ":
      return [["line1"], ["line2"], ["region", "postalCode"], ["countryCode"]];
  }
  return [
    ["line1", "line2"],
    ["city", "region", "postalCode"],
    ["countryCode"]
  ];
}

// node_modules/@yext/pages/dist/components/address/types.js
var ListingPublisherOption = {
  GOOGLEMYBUSINESS: "GOOGLEMYBUSINESS"
};
var MapProviderOption = {
  GOOGLE: "google",
  APPLE: "apple",
  BING: "bing"
};

// node_modules/@yext/pages/dist/components/address/methods.js
var getUnabbreviated = (field, address) => {
  const abbrFields = {
    region: "localizedRegionName",
    countryCode: "localizedCountryName"
  };
  const unabbreviatedField = abbrFields[field];
  return unabbreviatedField && address[unabbreviatedField];
};
var getDirections = (address, listings = [], googlePlaceId, config = {
  route: false
}) => {
  const NO_QUERY_WARNING = "Failed to construct query for maps service.";
  let query = address && encodeArray([
    address.line1,
    address.line2,
    address.city,
    address.region,
    address.postalCode,
    address.countryCode
  ]);
  switch (config.provider) {
    case MapProviderOption.APPLE: {
      if (!query) {
        console.warn(
          `${NO_QUERY_WARNING} Check that you've provided a valid Yext Address.`
        );
        break;
      }
      return getDirectionsApple(query, config.route);
    }
    case MapProviderOption.BING: {
      query = address && encodeArray([
        address.line1,
        address.city,
        address.region,
        address.postalCode
      ]);
      if (!query) {
        console.warn(
          `${NO_QUERY_WARNING} Check that you've provided a valid Yext Address.`
        );
        break;
      }
      return getDirectionsBing(query, config.route);
    }
    default: {
      const gmbListing = listings.find(
        (listing) => listing && listing.publisher && listing.publisher.toUpperCase() === ListingPublisherOption.GOOGLEMYBUSINESS
      );
      if (gmbListing && gmbListing.listingUrl) {
        return gmbListing.listingUrl;
      }
      if (googlePlaceId) {
        return getDirectionsGooglePlaceID(googlePlaceId, query, config.route);
      }
      if (!query) {
        console.warn(
          `${NO_QUERY_WARNING} Check that you've provided a valid Yext Address, Yext ListingType, or Google Place ID.`
        );
        break;
      }
      return getDirectionsGoogle(query, config.route);
    }
  }
};
var getDirectionsApple = (query, route) => {
  return route ? `https://maps.apple.com/?daddr=${query}` : `https://maps.apple.com/?address=${query}`;
};
var getDirectionsBing = (query, route) => {
  return route ? `https://bing.com/maps/default.aspx?rtp=adr.${query}` : `https://bing.com/maps/default.aspx?where1=${query}`;
};
var getDirectionsGooglePlaceID = (placeId, query, route) => {
  const queryParam = query ? `&query=${query}` : ``;
  if (route) {
    return `https://maps.google.com/maps/dir/?api=1${queryParam}&destination_place_id=${placeId}&destination=direct`;
  }
  if (queryParam) {
    `https://maps.google.com/maps/search/?api=1${queryParam}&query_place_id=${placeId}`;
  }
  return `https://maps.google.com/maps/dir/?api=1&destination_place_id=${placeId}&destination=direct`;
};
var getDirectionsGoogle = (query, route) => {
  return route ? `https://maps.google.com/maps/dir/?api=1&destination=${query}` : `https://maps.google.com/maps/search/?api=1&query=${query}`;
};
var encodeArray = (substrings = []) => {
  if (!substrings.length)
    return "";
  const str = substrings.filter(Boolean).join(", ");
  return encodeURI(str);
};

// node_modules/@yext/pages/dist/components/address/address.js
var Address = ({
  address,
  lines,
  separator,
  ...props
}) => {
  const renderedLines = (lines || localeAddressFormat(address.countryCode)).map(
    (line) => React.createElement(AddressLine, {
      address,
      line,
      separator,
      key: line.toString()
    })
  );
  return React.createElement("div", {
    ...props
  }, renderedLines);
};
Address.defaultProps = {
  separator: ","
};
var AddressLine = ({
  address,
  line,
  separator
}) => {
  const addressDOM = [];
  for (const field of line) {
    if (field === ",") {
      addressDOM.push(React.createElement("span", {
        key: field
      }, separator));
      continue;
    }
    const value = address[field];
    if (!value) {
      continue;
    }
    const unabbreviated = getUnabbreviated(field, address);
    if (unabbreviated) {
      addressDOM.push(
        React.createElement("abbr", {
          key: field,
          title: unabbreviated
        }, " ", value)
      );
      continue;
    }
    addressDOM.push(React.createElement("span", {
      key: field
    }, " ", value));
  }
  return React.createElement("div", null, addressDOM);
};

// node_modules/@yext/pages/dist/util/runtime.js
var import_browser_or_node = __toESM(require_lib(), 1);
var Runtime = class {
  constructor() {
    __publicField(this, "name");
    __publicField(this, "isServerSide");
    __publicField(this, "version");
    var _a;
    if (import_browser_or_node.isDeno) {
      this.name = "deno";
      this.version = "";
      if (import_browser_or_node.isBrowser) {
        this.version = ((_a = window.Deno) == null ? void 0 : _a.version.deno) || "";
      }
      this.isServerSide = true;
    } else if (import_browser_or_node.isNode) {
      this.name = "node";
      this.version = process.versions.node;
      this.isServerSide = true;
    } else if (import_browser_or_node.isBrowser) {
      this.name = "browser";
      this.version = navigator.userAgent;
      this.isServerSide = false;
    } else {
      this.name = "unknown";
      this.version = "";
      this.isServerSide = false;
    }
  }
  getNodeMajorVersion() {
    if (this.name != "node") {
      throw new Error("Not running in Node.");
    }
    return +this.version.split(".")[0];
  }
};
var getRuntime = () => {
  return new Runtime();
};

// node_modules/@yext/pages/dist/util/env.js
var isProduction = (domain) => {
  var _a;
  const runtime = getRuntime();
  return runtime.name === "browser" && domain === ((_a = window == null ? void 0 : window.location) == null ? void 0 : _a.hostname);
};

// node_modules/@yext/analytics/lib/esm/infra/HttpRequester.js
var import_cross_fetch = __toESM(require_browser_ponyfill());
var HttpRequester = function() {
  function HttpRequester2() {
  }
  HttpRequester2.prototype.post = function(url, body) {
    var data = JSON.stringify(body);
    var fetchInit = {
      method: "POST",
      body: data,
      keepalive: true
    };
    if (typeof window !== "undefined" && window.fetch) {
      return window.fetch(url, fetchInit);
    }
    return (0, import_cross_fetch.default)(url, fetchInit);
  };
  HttpRequester2.prototype.get = function(url) {
    var fetchInit = {
      method: "GET",
      mode: "no-cors"
    };
    if (typeof window !== "undefined" && window.fetch) {
      return window.fetch(url, fetchInit);
    }
    return (0, import_cross_fetch.default)(url, fetchInit);
  };
  return HttpRequester2;
}();

// node_modules/@yext/analytics/lib/esm/infra/SearchAnalyticsReporter.js
var __assign = function() {
  __assign = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var __awaiter = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var __rest = function(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var DEFAULT_DOMAIN = "https://answers.yext-pixel.com";
var SearchAnalyticsReporter = function() {
  function SearchAnalyticsReporter2(config, httpRequesterService) {
    this.config = config;
    this.httpRequesterService = httpRequesterService;
    this.setVisitor(config.visitor);
    this._debug = config.debug;
  }
  SearchAnalyticsReporter2.prototype.printEvent = function(event) {
    if (!this._debug)
      return;
    console.log("%c[YextAnalytics]%c- Tracked Search event: ".concat(event.type), "background: white; color: blue;", "");
  };
  SearchAnalyticsReporter2.prototype.report = function(event, additionalRequestAttributes) {
    var _a;
    return __awaiter(this, void 0, void 0, function() {
      var domain, url, type, eventData, data, res, errorMessage;
      return __generator(this, function(_b) {
        switch (_b.label) {
          case 0:
            domain = (_a = this.config.domain) !== null && _a !== void 0 ? _a : DEFAULT_DOMAIN;
            url = "".concat(domain, "/realtimeanalytics/data/answers/").concat(this.config.businessId);
            type = event.type, eventData = __rest(event, ["type"]);
            data = __assign(__assign({ eventType: type, businessId: this.config.businessId, experienceKey: this.config.experienceKey, experienceVersion: this.config.experienceVersion }, this._visitor && { visitor: __assign({}, this._visitor) }), SearchAnalyticsReporter2._formatForApi(eventData));
            return [4, this.httpRequesterService.post(url, __assign({ data }, additionalRequestAttributes))];
          case 1:
            res = _b.sent();
            if (!(res.status !== 200))
              return [3, 3];
            return [4, res.text()];
          case 2:
            errorMessage = _b.sent();
            throw new Error(errorMessage);
          case 3:
            this.printEvent(event);
            return [2];
        }
      });
    });
  };
  SearchAnalyticsReporter2.prototype.setVisitor = function(visitor) {
    this._visitor = visitor;
  };
  SearchAnalyticsReporter2._formatForApi = function(event) {
    var transformedEvent = __assign({}, event);
    if (transformedEvent.verticalKey) {
      transformedEvent.verticalConfigId = transformedEvent.verticalKey;
      delete transformedEvent.verticalKey;
    }
    return transformedEvent;
  };
  SearchAnalyticsReporter2.prototype.setDebugEnabled = function(enabled) {
    this._debug = enabled;
  };
  return SearchAnalyticsReporter2;
}();

// node_modules/@yext/analytics/lib/esm/models/search/SearchAnalyticsEventType.js
var SearchAnalyticsEventType;
(function(SearchAnalyticsEventType2) {
  SearchAnalyticsEventType2["AllTabNavigation"] = "ALL_TAB_NAVIGATION";
  SearchAnalyticsEventType2["VerticalTabNavigation"] = "VERTICAL_TAB_NAVIGATION";
  SearchAnalyticsEventType2["ScrollToBottomOfPage"] = "SCROLL_TO_BOTTOM_OF_PAGE";
  SearchAnalyticsEventType2["QuestionFocus"] = "QUESTION_FOCUS";
  SearchAnalyticsEventType2["QuestionSubmit"] = "QUESTION_SUBMIT";
  SearchAnalyticsEventType2["RowExpand"] = "ROW_EXPAND";
  SearchAnalyticsEventType2["RowCollapse"] = "ROW_COLLAPSE";
  SearchAnalyticsEventType2["ThumbsUp"] = "THUMBS_UP";
  SearchAnalyticsEventType2["ThumbsDown"] = "THUMBS_DOWN";
  SearchAnalyticsEventType2["VoiceStart"] = "VOICE_START";
  SearchAnalyticsEventType2["VoiceStop"] = "VOICE_STOP";
  SearchAnalyticsEventType2["SearchBarImpression"] = "SEARCH_BAR_IMPRESSION";
  SearchAnalyticsEventType2["SearchClearButton"] = "SEARCH_CLEAR_BUTTON";
  SearchAnalyticsEventType2["Paginate"] = "PAGINATE";
  SearchAnalyticsEventType2["AutocompleteSelection"] = "AUTO_COMPLETE_SELECTION";
  SearchAnalyticsEventType2["VerticalViewAll"] = "VERTICAL_VIEW_ALL";
  SearchAnalyticsEventType2["CtaClick"] = "CTA_CLICK";
  SearchAnalyticsEventType2["TitleClick"] = "TITLE_CLICK";
  SearchAnalyticsEventType2["TapToCall"] = "TAP_TO_CALL";
  SearchAnalyticsEventType2["OrderNow"] = "ORDER_NOW";
  SearchAnalyticsEventType2["AddToCart"] = "ADD_TO_CART";
  SearchAnalyticsEventType2["ApplyNow"] = "APPLY_NOW";
  SearchAnalyticsEventType2["DrivingDirections"] = "DRIVING_DIRECTIONS";
  SearchAnalyticsEventType2["ViewWebsite"] = "VIEW_WEBSITE";
  SearchAnalyticsEventType2["Email"] = "EMAIL";
  SearchAnalyticsEventType2["BookAppointment"] = "BOOK_APPOINTMENT";
  SearchAnalyticsEventType2["Rsvp"] = "RSVP";
  SearchAnalyticsEventType2["ResultsHidden"] = "RESULTS_HIDDEN";
  SearchAnalyticsEventType2["ResultsUnhidden"] = "RESULTS_UNHIDDEN";
  SearchAnalyticsEventType2["FollowUpQuery"] = "FOLLOW_UP_QUERY";
})(SearchAnalyticsEventType || (SearchAnalyticsEventType = {}));

// node_modules/@yext/analytics/lib/esm/models/pages/events/DefaultPagesEventNames.js
var DefaultPagesEventNames;
(function(DefaultPagesEventNames2) {
  DefaultPagesEventNames2["PageView"] = "PAGE_VIEW";
  DefaultPagesEventNames2["CTA"] = "CTA_CLICK";
  DefaultPagesEventNames2["Website"] = "WEBSITE";
  DefaultPagesEventNames2["DrivingDirection"] = "DRIVING_DIRECTIONS";
  DefaultPagesEventNames2["PhoneCall"] = "CALL";
})(DefaultPagesEventNames || (DefaultPagesEventNames = {}));

// node_modules/@yext/analytics/lib/esm/models/pages/events/CtaClick.js
var CtaClick = {
  eventType: DefaultPagesEventNames.CTA
};

// node_modules/@yext/analytics/lib/esm/models/pages/events/WebsiteEvent.js
var WebsiteEvent = {
  eventType: DefaultPagesEventNames.Website
};

// node_modules/@yext/analytics/lib/esm/models/pages/events/DrivingDirectionEvent.js
var DrivingDirectionEvent = {
  eventType: DefaultPagesEventNames.DrivingDirection
};

// node_modules/@yext/analytics/lib/esm/models/pages/events/PageViewEvent.js
var PageViewEvent = {
  eventType: DefaultPagesEventNames.PageView
};

// node_modules/@yext/analytics/lib/esm/models/pages/events/PhoneCallEvent.js
var PhoneCallEvent = {
  eventType: DefaultPagesEventNames.PhoneCall
};

// node_modules/@yext/analytics/lib/esm/models/constants.js
var COOKIE_PARAM = "_yfpc";
var COOKIE_REMOVAL_VALUE = "__temp__";
var LISTINGS_SOURCE_PARAM = "y_source";
var DEFAULT_CONVERSION_TRACKING_DOMAIN = "realtimeanalytics.yext.com";

// node_modules/@yext/analytics/lib/esm/infra/CalculateSeed.js
function calculateSeed() {
  return Date.now() + Math.floor(1e3 * Math.random());
}

// node_modules/@yext/analytics/lib/esm/infra/ConversionTrackingReporter.js
var __awaiter2 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator2 = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var conversionEndpoint = "conversiontracking/conversion";
var listingsEndpoint = "listings";
var ConversionTrackingReporter = function() {
  function ConversionTrackingReporter2(httpRequesterService, debug) {
    this.httpRequesterService = httpRequesterService;
    this.debug = debug;
    this._debug = debug;
  }
  ConversionTrackingReporter2.prototype.printEvent = function(event, type) {
    if (!this._debug)
      return;
    console.log("%c[YextAnalytics]%c- Tracked ".concat(type, " event: ").concat(event), "background: white; color: blue;", "");
  };
  ConversionTrackingReporter2.prototype.handleRequest = function(url) {
    return __awaiter2(this, void 0, void 0, function() {
      var res, errorMessage;
      return __generator2(this, function(_a) {
        switch (_a.label) {
          case 0:
            return [4, this.httpRequesterService.get(url.toString())];
          case 1:
            res = _a.sent();
            if (!(res.status !== 200 && !(res.type === "opaqueredirect" || res.type === "opaque")))
              return [3, 3];
            return [4, res.text()];
          case 2:
            errorMessage = _a.sent();
            throw new Error(errorMessage);
          case 3:
            return [2];
        }
      });
    });
  };
  ConversionTrackingReporter2.formatBaseEvent = function(event, params) {
    params.set(COOKIE_PARAM, event.cookieId);
    if (event.referrer)
      params.set("referrer", event.referrer);
    params.set("v", calculateSeed().toString());
    params.set("location", event.location);
  };
  ConversionTrackingReporter2.prototype.trackConversion = function(event) {
    return __awaiter2(this, void 0, void 0, function() {
      var url, params;
      return __generator2(this, function(_a) {
        switch (_a.label) {
          case 0:
            url = new URL("https://".concat(DEFAULT_CONVERSION_TRACKING_DOMAIN, "/").concat(conversionEndpoint));
            params = new URLSearchParams();
            params.set("cid", event.cid);
            if (event.cv)
              params.set("cv", event.cv);
            ConversionTrackingReporter2.formatBaseEvent(event, params);
            url.search = params.toString();
            return [4, this.handleRequest(url.toString())];
          case 1:
            _a.sent();
            this.printEvent(event.cid, "Conversion");
            return [2];
        }
      });
    });
  };
  ConversionTrackingReporter2.prototype.trackListings = function(event) {
    return __awaiter2(this, void 0, void 0, function() {
      var url, params;
      return __generator2(this, function(_a) {
        switch (_a.label) {
          case 0:
            url = new URL("https://".concat(DEFAULT_CONVERSION_TRACKING_DOMAIN, "/").concat(listingsEndpoint));
            params = new URLSearchParams();
            params.set(LISTINGS_SOURCE_PARAM, event.source);
            ConversionTrackingReporter2.formatBaseEvent(event, params);
            url.search = params.toString();
            return [4, this.handleRequest(url.toString())];
          case 1:
            _a.sent();
            this.printEvent(event.source, "Listings Click");
            return [2];
        }
      });
    });
  };
  ConversionTrackingReporter2.prototype.setDebugEnabled = function(enabled) {
    this._debug = enabled;
  };
  return ConversionTrackingReporter2;
}();

// node_modules/@yext/analytics/lib/esm/infra/PagesAnalyticsReporter.js
var __awaiter3 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator3 = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var DEFAULT_DOMAIN_PAGES = "www.yext-pixel.com";
var PRODUCT_NAME = "sites";
var ENDPOINT = "store_pagespixel";
var urlParamNames;
(function(urlParamNames2) {
  urlParamNames2["BusinessId"] = "businessids";
  urlParamNames2["Product"] = "product";
  urlParamNames2["SiteId"] = "siteId";
  urlParamNames2["IsStaging"] = "isStaging";
  urlParamNames2["CacheBuster"] = "v";
  urlParamNames2["UrlPath"] = "pageurl";
  urlParamNames2["Referrer"] = "pagesReferrer";
  urlParamNames2["EventType"] = "eventType";
  urlParamNames2["PageSetId"] = "pageSetId";
  urlParamNames2["EntityInternalId"] = "ids";
  urlParamNames2["DirectoryId"] = "directoryId";
  urlParamNames2["SearchId"] = "searchId";
  urlParamNames2["StaticPageId"] = "staticPageId";
  urlParamNames2["PageType"] = "pageType";
  urlParamNames2["VisitorId"] = "visitorId";
  urlParamNames2["VisitorMethod"] = "visitorIdMethod";
  urlParamNames2["PageDomain"] = "pageDomain";
})(urlParamNames || (urlParamNames = {}));
var eventTypeNameMapping = /* @__PURE__ */ new Map();
eventTypeNameMapping.set(DefaultPagesEventNames.PageView, "pageview");
eventTypeNameMapping.set(DefaultPagesEventNames.CTA, "calltoactionclick");
eventTypeNameMapping.set(DefaultPagesEventNames.PhoneCall, "phonecall");
eventTypeNameMapping.set(DefaultPagesEventNames.DrivingDirection, "drivingdirection");
eventTypeNameMapping.set(DefaultPagesEventNames.Website, "clicktowebsite");
function getEventName(name) {
  var mappedName = eventTypeNameMapping.get(name);
  if (typeof mappedName === "string") {
    return mappedName;
  }
  return name;
}
var PagesAnalyticsReporter = function() {
  function PagesAnalyticsReporter2(config, httpRequesterService) {
    this.config = config;
    this.httpRequesterService = httpRequesterService;
    this.setVisitor(config.visitor);
    this._debug = config.debug;
    this._conversionTracker = new ConversionTrackingReporter(this.httpRequesterService, this._debug);
    this._hasTrackedListings = false;
    try {
      this._pageUrl = new URL(config.pageUrl);
    } catch (_a) {
      throw new Error("pageUrl property must be a valid URL, was: '".concat(config.pageUrl, "'"));
    }
    if (config.pageDomain) {
      try {
        this._pageDomain = new URL(config.pageDomain);
      } catch (_b) {
        console.warn("pageDomain '".concat(config.pageDomain, "' is not a valid URL."), "It will not be included as a query param sent to the API.");
      }
    }
  }
  PagesAnalyticsReporter2.prototype.printEvent = function(event) {
    if (!this._debug)
      return;
    console.log("%c[YextAnalytics]%c- Tracked Pages event: ".concat(event.eventType), "background: white; color: blue;", "");
  };
  PagesAnalyticsReporter2.prototype.urlParameters = function(event) {
    var params = new URLSearchParams();
    params.set(urlParamNames.BusinessId, this.config.businessId.toString());
    params.set(urlParamNames.Product, PRODUCT_NAME);
    params.set(urlParamNames.SiteId, this.config.siteId.toString());
    params.set(urlParamNames.IsStaging, (!this.config.production).toString());
    params.set(urlParamNames.EventType, getEventName(event.eventType));
    params.set(urlParamNames.PageType, this.config.pageType.name);
    if (this.config.pageType.name === "entity") {
      params.set(urlParamNames.PageSetId, this.config.pageType.pageSetId);
      params.set(urlParamNames.EntityInternalId, this.config.pageType.id.toString());
    } else if (this.config.pageType.name === "directory") {
      params.set(urlParamNames.DirectoryId, this.config.pageType.directoryId);
      params.set(urlParamNames.EntityInternalId, this.config.pageType.id.toString());
    } else if (this.config.pageType.name === "locator") {
      params.set(urlParamNames.SearchId, this.config.pageType.searchId);
    } else if (urlParamNames.StaticPageId in this.config.pageType) {
      params.set(urlParamNames.StaticPageId, this.config.pageType.staticPageId);
    }
    params.set(urlParamNames.CacheBuster, calculateSeed().toString());
    params.set(urlParamNames.UrlPath, this._pageUrl.pathname);
    params.set(urlParamNames.Referrer, this.config.referrer);
    this._pageDomain && params.set(urlParamNames.PageDomain, this._pageDomain.toString());
    if (this._conversionTrackingEnabled && this._cookieID) {
      params.set(COOKIE_PARAM, this._cookieID);
    }
    if (this._visitor) {
      params.set(urlParamNames.VisitorId, this._visitor.id);
      if (this._visitor.idMethod)
        params.set(urlParamNames.VisitorMethod, this._visitor.idMethod);
    }
    return params;
  };
  PagesAnalyticsReporter2.prototype.pageView = function() {
    return __awaiter3(this, void 0, void 0, function() {
      var sourceValue;
      return __generator3(this, function(_a) {
        switch (_a.label) {
          case 0:
            sourceValue = this._pageUrl.searchParams.get(LISTINGS_SOURCE_PARAM);
            if (!(this._conversionTrackingEnabled && this._cookieID && !this._hasTrackedListings && sourceValue))
              return [3, 2];
            return [4, this._conversionTracker.trackListings({
              cookieId: this._cookieID,
              location: this._pageUrl.toString(),
              source: sourceValue
            })];
          case 1:
            _a.sent();
            this._hasTrackedListings = true;
            _a.label = 2;
          case 2:
            return [2, this.track(PageViewEvent)];
        }
      });
    });
  };
  PagesAnalyticsReporter2.prototype.endpoint = function() {
    if (this._conversionTrackingEnabled) {
      return "https://".concat(DEFAULT_CONVERSION_TRACKING_DOMAIN, "/").concat(ENDPOINT);
    }
    return "https://".concat(DEFAULT_DOMAIN_PAGES, "/").concat(ENDPOINT);
  };
  PagesAnalyticsReporter2.prototype.track = function(event, conversionInfo) {
    return __awaiter3(this, void 0, void 0, function() {
      var url, res, errorMessage;
      return __generator3(this, function(_a) {
        switch (_a.label) {
          case 0:
            url = new URL(this.endpoint());
            url.search = this.urlParameters(event).toString();
            return [4, this.httpRequesterService.get(url.toString())];
          case 1:
            res = _a.sent();
            if (!(res.status !== 200 && !(res.type == "opaque" || res.type == "opaqueredirect")))
              return [3, 3];
            return [4, res.text()];
          case 2:
            errorMessage = _a.sent();
            throw new Error(errorMessage);
          case 3:
            this.printEvent(event);
            if (!(this._conversionTrackingEnabled && this._cookieID && conversionInfo))
              return [3, 5];
            return [4, this._conversionTracker.trackConversion({
              cid: conversionInfo.cid,
              cv: conversionInfo.cv,
              cookieId: this._cookieID,
              location: this._pageUrl.toString()
            })];
          case 4:
            _a.sent();
            _a.label = 5;
          case 5:
            return [2];
        }
      });
    });
  };
  PagesAnalyticsReporter2.prototype.setDebugEnabled = function(enabled) {
    this._debug = enabled;
    if (this._conversionTracker) {
      this._conversionTracker.setDebugEnabled(enabled);
    }
  };
  PagesAnalyticsReporter2.prototype.setVisitor = function(visitor) {
    this._visitor = visitor;
  };
  PagesAnalyticsReporter2.prototype.setConversionTrackingEnabled = function(enabled, cookieId) {
    this._conversionTrackingEnabled = enabled;
    this._cookieID = cookieId;
  };
  return PagesAnalyticsReporter2;
}();

// node_modules/@yext/analytics/lib/esm/utils/CookieManager.js
var CookieManager = function() {
  function CookieManager2(_outerWindow, _outerDocument) {
    if (_outerWindow === void 0) {
      _outerWindow = window;
    }
    if (_outerDocument === void 0) {
      _outerDocument = document;
    }
    this._outerWindow = _outerWindow;
    this._outerDocument = _outerDocument;
  }
  CookieManager2.prototype.setAndGetYextCookie = function() {
    var cookieValue = this.fetchCookie();
    if (!cookieValue) {
      cookieValue = CookieManager2.generateRandomCookie().toString();
    }
    this.setCookieAndRemoveOldCookies(cookieValue);
    return cookieValue;
  };
  CookieManager2.generateRandomCookie = function() {
    return Math.floor(Math.random() * new Date().getTime());
  };
  CookieManager2.prototype.fetchCookie = function() {
    var _this = this;
    var cookieValue = "";
    var checkDomain = function(domain) {
      if (_this.canSetCookieWithDomain(domain)) {
        var removedValue = _this.removeCookieByDomain(domain);
        if (removedValue) {
          cookieValue = removedValue;
          _this.setCookie(cookieValue, domain);
        }
        return true;
      }
    };
    this.forEachDomainIncreasingSpecificity(checkDomain);
    if (!cookieValue)
      checkDomain("");
    return cookieValue;
  };
  CookieManager2.prototype.forEachDomainIncreasingSpecificity = function(func) {
    var exitedLoop = false;
    var domainParts = this._outerDocument.location.hostname.split(".").reverse();
    var currDomain = "";
    for (var i = 0; i < domainParts.length; i++) {
      currDomain = "." + domainParts[i] + currDomain;
      if (func(currDomain)) {
        exitedLoop = true;
        break;
      }
    }
    if (!exitedLoop)
      func("");
  };
  CookieManager2.prototype.removeCookieByDomain = function(cookieDomain) {
    var prevRemainingCookies = this.persistentCookies();
    this.clearCookie(cookieDomain);
    var remainingCookies = this.persistentCookies();
    if (remainingCookies.length < prevRemainingCookies.length) {
      return CookieManager2.listDifference(prevRemainingCookies, remainingCookies)[0] || "";
    }
    return "";
  };
  CookieManager2.listDifference = function(superlist, sublist) {
    var superlistCopy = Array.from(superlist);
    for (var i = 0; i < sublist.length; i++) {
      var index = superlistCopy.indexOf(sublist[i]);
      if (index !== -1) {
        superlistCopy.splice(index, 1);
      }
    }
    return superlistCopy;
  };
  CookieManager2.prototype.persistentCookies = function() {
    return this.allCookies().filter(function(val) {
      return val !== COOKIE_REMOVAL_VALUE;
    });
  };
  CookieManager2.prototype.allCookies = function() {
    var arr = [];
    this.forEachCookieNameValue(function(name, value) {
      if (name === COOKIE_PARAM) {
        arr.push(value);
      }
    });
    return arr;
  };
  CookieManager2.prototype.forEachCookieNameValue = function(nameValueFunc) {
    this._outerDocument.cookie.split(";").forEach(function(cookie) {
      var keyValue = cookie.split("="), key = keyValue[0], value = keyValue[1];
      if (key && value) {
        nameValueFunc(key.trim(), value.trim());
      }
    });
  };
  CookieManager2.prototype.setCookieAndRemoveOldCookies = function(cookieValue) {
    var _this = this;
    var rootDomainReached = false;
    var totalCookies = this.allCookies().length;
    var numCookiesEncountered = 0;
    this.forEachDomainIncreasingSpecificity(function(domain) {
      if (rootDomainReached) {
        if (_this.removeCookieByDomain(domain))
          numCookiesEncountered++;
      } else {
        if (_this.canSetCookieWithDomain(domain)) {
          if (_this.removeCookieByDomain(domain))
            numCookiesEncountered++;
          _this.setCookie(cookieValue, domain);
          rootDomainReached = true;
        }
      }
      if (numCookiesEncountered >= totalCookies && rootDomainReached) {
        return true;
      }
    });
  };
  CookieManager2.prototype.canSetCookieWithDomain = function(domain) {
    var lostCookie = this.removeCookieByDomain(domain);
    var existingCookies = this.allCookies();
    this.setCookie(COOKIE_REMOVAL_VALUE, domain);
    var newCookies = this.allCookies();
    if (existingCookies.length < newCookies.length) {
      if (lostCookie) {
        this.setCookie(lostCookie, domain);
      } else {
        this.clearCookie(domain);
      }
      return true;
    }
    return false;
  };
  CookieManager2.prototype.setCookie = function(cookieValue, cookieDomain) {
    this._outerDocument.cookie = this.formatCookie(COOKIE_PARAM, cookieValue, cookieDomain);
  };
  CookieManager2.prototype.formatCookie = function(cookieName, cookieValue, domain, path) {
    if (path === void 0) {
      path = "/";
    }
    var cookieString = cookieName + "=" + cookieValue;
    var now = new Date();
    now.setTime(now.getTime() + 90 * 24 * 60 * 60 * 1e3);
    cookieString += ";path=" + path;
    cookieString += ";expires=" + now.toUTCString();
    if (domain)
      cookieString += ";domain=" + domain;
    cookieString += ";samesite=None;";
    if (this._outerWindow.location.protocol === "https:") {
      cookieString += " Secure ";
    }
    return cookieString;
  };
  CookieManager2.prototype.clearCookie = function(cookieDomain, cookiePath) {
    if (cookieDomain === void 0) {
      cookieDomain = "";
    }
    if (cookiePath === void 0) {
      cookiePath = "/";
    }
    var epoch = new Date(0);
    var cookieString = COOKIE_PARAM + "=" + COOKIE_REMOVAL_VALUE;
    cookieString += ";path=" + cookiePath;
    cookieString += ";expires=" + epoch.toUTCString();
    if (cookieDomain)
      cookieString += ";domain=" + cookieDomain + ";";
    cookieString += ";samesite=None;";
    if (this._outerWindow.location.protocol === "https:") {
      cookieString += " Secure ";
    }
    this._outerDocument.cookie = cookieString;
  };
  return CookieManager2;
}();

// node_modules/@yext/analytics/lib/esm/index.js
function providePagesAnalytics(config) {
  var httpRequester = new HttpRequester();
  return new PagesAnalyticsReporter(config, httpRequester);
}

// node_modules/@yext/pages/dist/components/analytics/helpers.js
function slugify(str) {
  return str.toLowerCase().trim().replace(/[^\w\s-]|[\s-]+/g, "");
}
function concatScopes(a, b) {
  return [a, b].filter((scope) => !!scope).map((scope) => slugify(scope)).join("_");
}

// node_modules/@yext/pages/dist/components/analytics/Analytics.js
var Analytics = class {
  constructor(templateData, requireOptIn, pageDomain) {
    __publicField(this, "_optedIn");
    __publicField(this, "_conversionTrackingEnabled", false);
    __publicField(this, "_cookieManager");
    __publicField(this, "_analyticsReporter");
    __publicField(this, "_pageViewFired", false);
    __publicField(this, "_enableDebugging", false);
    this.templateData = templateData;
    this.pageDomain = pageDomain;
    this._optedIn = !requireOptIn;
    this.makeReporter();
    this.pageView();
  }
  calculatePageType() {
    var _a, _b, _c, _d;
    const isStaticPage = !!((_b = (_a = this.templateData.document) == null ? void 0 : _a.__) == null ? void 0 : _b.staticPage);
    const isEntityPage = !!((_d = (_c = this.templateData.document) == null ? void 0 : _c.__) == null ? void 0 : _d.entityPageSet);
    let pageType;
    if (isStaticPage) {
      pageType = {
        name: "static",
        staticPageId: this.templateData.document.__.name
      };
    } else if (isEntityPage) {
      pageType = {
        name: "entity",
        pageSetId: this.templateData.document.__.name,
        id: this.templateData.document.uid
      };
    } else {
      throw new Error("invalid document type");
    }
    return pageType;
  }
  makeReporter() {
    var _a, _b, _c, _d;
    if (getRuntime().name !== "browser") {
      return;
    }
    if (!this._optedIn) {
      return;
    }
    const inProduction = isProduction((_b = (_a = this.templateData) == null ? void 0 : _a.document) == null ? void 0 : _b.siteInternalHostName) || isProduction((_d = (_c = this.templateData) == null ? void 0 : _c.document) == null ? void 0 : _d.siteDomain);
    this._analyticsReporter = providePagesAnalytics({
      businessId: this.templateData.document.businessId,
      pageType: this.calculatePageType(),
      pageUrl: window.location.href,
      production: inProduction,
      referrer: document.referrer,
      siteId: this.templateData.document.siteId,
      pageDomain: this.pageDomain
    });
    this.setDebugEnabled(this._enableDebugging);
  }
  canTrack() {
    return getRuntime().name === "browser" && this._optedIn && !!this._analyticsReporter;
  }
  setupConversionTracking() {
    var _a;
    this._cookieManager = new CookieManager();
    (_a = this._analyticsReporter) == null ? void 0 : _a.setConversionTrackingEnabled(
      true,
      this._cookieManager.setAndGetYextCookie()
    );
  }
  enableTrackingCookie() {
    this._conversionTrackingEnabled = true;
    if (this.canTrack()) {
      this.setupConversionTracking();
    }
  }
  identify(visitor) {
    var _a;
    if (this.canTrack()) {
      (_a = this._analyticsReporter) == null ? void 0 : _a.setVisitor(visitor);
    }
  }
  async optIn() {
    this._optedIn = true;
    this.makeReporter();
    if (this._conversionTrackingEnabled && !this._cookieManager) {
      this.setupConversionTracking();
    }
    if (!this._pageViewFired) {
      await this.pageView();
    }
  }
  async pageView() {
    var _a;
    if (!this.canTrack()) {
      return Promise.resolve(void 0);
    }
    await ((_a = this._analyticsReporter) == null ? void 0 : _a.pageView());
    this._pageViewFired = true;
  }
  async track(eventName, conversionData) {
    var _a;
    if (!this.canTrack()) {
      return Promise.resolve();
    }
    await ((_a = this._analyticsReporter) == null ? void 0 : _a.track(
      { eventType: slugify(eventName) },
      conversionData
    ));
  }
  setDebugEnabled(enabled) {
    var _a;
    this._enableDebugging = enabled;
    (_a = this._analyticsReporter) == null ? void 0 : _a.setDebugEnabled(enabled);
  }
  trackClick(eventName, conversionData) {
    return (e) => {
      if (!this.canTrack()) {
        return Promise.resolve();
      }
      if (e.target === null || e.defaultPrevented) {
        return this.track(eventName, conversionData);
      }
      const targetLink = e.target;
      if (targetLink.href === null || targetLink.href === void 0) {
        return this.track(eventName, conversionData);
      }
      const linkUrl = new URL(targetLink.href);
      if (linkUrl.protocol === "mailto:" || linkUrl.protocol === "tel:" || linkUrl.protocol === "javascript:" || linkUrl.hostname === window.location.hostname) {
        return this.track(eventName, conversionData);
      }
      const targetBlankOrSimilar = targetLink.target && !targetLink.target.match(/^_(self|parent|top)$/i) || e.ctrlKey || e.shiftKey || e.metaKey;
      if (targetBlankOrSimilar) {
        return this.track(eventName, conversionData);
      }
      e.preventDefault();
      const navigate = () => {
        window.location.assign(linkUrl);
      };
      const awaitTimeout = new Promise((resolve) => {
        setTimeout(() => {
          resolve();
        }, 1e3);
      });
      return Promise.race([
        this.track(eventName, conversionData),
        awaitTimeout
      ]).then(navigate);
    };
  }
};

// node_modules/@yext/pages/dist/components/analytics/context.js
var import_react = __toESM(require_react(), 1);
var AnalyticsContext = (0, import_react.createContext)(null);

// node_modules/@yext/pages/dist/components/analytics/hooks.js
var import_react3 = __toESM(require_react(), 1);

// node_modules/@yext/pages/dist/components/analytics/scope.js
var import_react2 = __toESM(require_react(), 1);
var ScopeContext = import_react2.default.createContext({ name: "" });
var useScope = () => {
  const ctx = import_react2.default.useContext(ScopeContext);
  return ctx.name;
};
function AnalyticsScopeProvider(props) {
  const parentScope = useScope();
  const combinedScope = concatScopes(parentScope, props.name);
  return import_react2.default.createElement(ScopeContext.Provider, {
    value: { name: combinedScope }
  }, props.children);
}

// node_modules/@yext/pages/dist/components/analytics/hooks.js
function useAnalytics() {
  const ctx = (0, import_react3.useContext)(AnalyticsContext);
  if (!ctx) {
    return ctx;
  }
  if (getRuntime().name === "browser" && !window.setAnalyticsOptIn) {
    window.setAnalyticsOptIn = async () => {
      await ctx.optIn();
    };
  }
  const scope = useScope();
  return {
    trackClick(eventName, conversionData) {
      return ctx.trackClick(concatScopes(scope, eventName), conversionData);
    },
    setDebugEnabled(enabled) {
      return ctx.setDebugEnabled(enabled);
    },
    enableTrackingCookie() {
      return ctx.enableTrackingCookie();
    },
    identify(visitor) {
      return ctx.identify(visitor);
    },
    optIn() {
      return ctx.optIn();
    },
    pageView() {
      return ctx.pageView();
    },
    track(eventName, conversionData) {
      return ctx.track(concatScopes(scope, eventName), conversionData);
    }
  };
}
var useTrack = () => {
  var _a;
  return (_a = useAnalytics()) == null ? void 0 : _a.track;
};
var usePageView = () => {
  var _a;
  return (_a = useAnalytics()) == null ? void 0 : _a.pageView;
};
var useIdentify = () => {
  var _a;
  return (_a = useAnalytics()) == null ? void 0 : _a.identify;
};

// node_modules/@yext/pages/dist/components/analytics/provider.js
var React3 = __toESM(require_react(), 1);
var import_react4 = __toESM(require_react(), 1);
function AnalyticsProvider(props) {
  const {
    children,
    requireOptIn,
    enableTrackingCookie,
    enableDebugging,
    templateData,
    pageDomain
  } = props;
  const analyticsRef = (0, import_react4.useRef)(null);
  if (analyticsRef.current === null) {
    analyticsRef.current = new Analytics(
      templateData,
      requireOptIn,
      pageDomain
    );
  }
  const analytics = analyticsRef.current;
  if (enableTrackingCookie) {
    analytics.enableTrackingCookie();
  }
  let enableDebuggingDefault = debuggingParamDetected();
  if (getRuntime().name === "node") {
    enableDebuggingDefault = enableDebuggingDefault || true;
  }
  analytics.setDebugEnabled(enableDebugging != null ? enableDebugging : enableDebuggingDefault);
  return React3.createElement(AnalyticsContext.Provider, {
    value: analytics
  }, children);
}
function debuggingParamDetected() {
  if (getRuntime().name !== "browser") {
    return false;
  }
  if (typeof window === void 0) {
    return false;
  }
  const currentUrl = new URL(window.location.href);
  return !!currentUrl.searchParams.get("xYextDebug");
}

// node_modules/@yext/pages/dist/components/image/image.js
var React4 = __toESM(require_react(), 1);
var import_react5 = __toESM(require_react(), 1);

// node_modules/@yext/pages/dist/components/image/types.js
var ImageLayoutOption = {
  INTRINSIC: "intrinsic",
  FIXED: "fixed",
  ASPECT: "aspect",
  FILL: "fill"
};

// node_modules/@yext/pages/dist/components/image/image.js
var MKTGCDN_URL_REGEX = /(https?:\/\/a.mktgcdn.com\/p(?<env>-sandbox|-qa|-dev)?\/)(?<uuid>.+)\/(.*)/;
var Image = ({
  image,
  className,
  width,
  height,
  aspectRatio,
  layout = ImageLayoutOption.INTRINSIC,
  placeholder,
  imgOverrides,
  style = {},
  loading = "lazy"
}) => {
  const imgRef = (0, import_react5.useRef)(null);
  const [isImageLoaded, setIsImageLoaded] = (0, import_react5.useState)(false);
  const imageData = "image" in image ? image.image : image;
  (0, import_react5.useEffect)(() => {
    var _a;
    if ((_a = imgRef.current) == null ? void 0 : _a.complete) {
      setIsImageLoaded(true);
    }
  }, []);
  validateRequiredProps(
    layout,
    imageData.width,
    imageData.height,
    width,
    height,
    aspectRatio
  );
  const imgWidth = Math.abs(imageData.width);
  const imgHeight = Math.abs(imageData.height);
  const imgUUID = getImageUUID(imageData.url);
  const imgEnv = getImageEnv(imageData.url);
  if (!imgUUID) {
    return React4.createElement(React4.Fragment, null, placeholder != null && placeholder);
  }
  const absWidth = width && width > 0 ? width : void 0;
  const absHeight = height && height > 0 ? height : void 0;
  const { src, imgStyle, widths } = handleLayout(
    layout,
    imgWidth,
    imgHeight,
    imgUUID,
    style,
    imageData.url,
    absWidth,
    absHeight,
    aspectRatio
  );
  const srcSet = widths.map(
    (w) => `${getImageUrl(
      imgUUID,
      w,
      imgHeight / imgWidth * w,
      imageData.url
    )} ${w}w`
  ).join(", ");
  const maxWidthBreakpoints = [640, 768, 1024, 1280, 1536];
  const sizes = widths.map(
    (w, i) => i === widths.length - 1 ? `${w}px` : `(max-width: ${maxWidthBreakpoints[i]}px) ${w}px`
  ).join(", ");
  return React4.createElement(React4.Fragment, null, !isImageLoaded && placeholder != null && placeholder, React4.createElement("img", {
    ref: imgRef,
    style: imgStyle,
    src,
    className,
    width: absWidth,
    height: absHeight,
    srcSet,
    sizes,
    loading,
    alt: imageData.alternateText || "",
    ...imgOverrides
  }));
};
var validateRequiredProps = (layout, imgWidth, imgHeight, width, height, aspectRatio) => {
  if (imgWidth < 0) {
    console.warn(`Invalid image width: ${imgWidth}.`);
  }
  if (imgHeight < 0) {
    console.warn(`Invalid image height: ${imgHeight}.`);
  }
  if (layout == ImageLayoutOption.FIXED) {
    if (!width && !height) {
      console.warn(
        "Using fixed layout but neither width nor height is passed as props."
      );
      return;
    }
    if (width && width < 0) {
      console.warn(`Using fixed layout but width is invalid: ${width}.`);
    }
    if (height && height < 0) {
      console.warn(`Using fixed layout but height is invalid: ${height}.`);
    }
    return;
  }
  if (width || height) {
    console.warn(
      "Width or height is passed in but layout is not fixed. These will have no impact. If you want to have a fixed height or width then set layout to fixed."
    );
  }
  if (layout == ImageLayoutOption.ASPECT && !aspectRatio) {
    console.warn(
      "Using aspect layout but aspectRatio is not passed as a prop."
    );
  }
};
var getImageUUID = (url) => {
  var _a;
  const matches = url.match(MKTGCDN_URL_REGEX);
  if (!((_a = matches == null ? void 0 : matches.groups) == null ? void 0 : _a.uuid)) {
    console.error(`Invalid image url: ${url}.`);
    return "";
  }
  return matches.groups.uuid;
};
var getImageEnv = (url) => {
  var _a;
  const matches = url.match(MKTGCDN_URL_REGEX);
  return (_a = matches == null ? void 0 : matches.groups) == null ? void 0 : _a.env;
};
var getImageUrl = (uuid, width, height, imgUrl) => {
  const env = getImageEnv(imgUrl);
  const bucket = env ? `p${env}` : "p";
  return `https://dynl.mktgcdn.com/${bucket}/${uuid}/${Math.round(
    width
  )}x${Math.round(height)}`;
};
var handleLayout = (layout, imgWidth, imgHeight, imgUUID, style, imgUrl, absWidth, absHeight, aspectRatio) => {
  let widths = [100, 320, 640, 960, 1280, 1920];
  let src = getImageUrl(imgUUID, 500, 500, imgUrl);
  const imgStyle = { ...style };
  imgStyle.objectFit = imgStyle.objectFit || "cover";
  imgStyle.objectPosition = imgStyle.objectPosition || "center";
  switch (layout) {
    case ImageLayoutOption.INTRINSIC:
      imgStyle.maxWidth = imgWidth;
      imgStyle.width = "100%";
      imgStyle.aspectRatio = aspectRatio ? `${aspectRatio}` : `${imgWidth} / ${imgHeight}`;
      break;
    case ImageLayoutOption.FIXED: {
      const { fixedWidth, fixedHeight, fixedWidths } = getImageSizeForFixedLayout(
        imgWidth,
        imgHeight,
        widths,
        absWidth,
        absHeight
      );
      imgStyle.width = fixedWidth;
      imgStyle.height = fixedHeight;
      widths = fixedWidths;
      src = getImageUrl(imgUUID, fixedWidth, fixedHeight, imgUrl);
      break;
    }
    case ImageLayoutOption.ASPECT:
      imgStyle.aspectRatio = aspectRatio ? `${aspectRatio}` : `${imgWidth} / ${imgHeight}`;
      break;
    case ImageLayoutOption.FILL:
      imgStyle.width = "100%";
      imgStyle.aspectRatio = aspectRatio ? `${aspectRatio}` : `${imgWidth} / ${imgHeight}`;
      break;
    default:
      console.warn(`Unrecognized layout: ${layout}.`);
      break;
  }
  return { src, imgStyle, widths };
};
var getImageSizeForFixedLayout = (imgWidth, imgHeight, defaultWidths, absWidth, absHeight) => {
  if (absWidth && absHeight) {
    return {
      fixedWidth: absWidth,
      fixedHeight: absHeight,
      fixedWidths: [absWidth]
    };
  }
  if (absWidth) {
    return {
      fixedWidth: absWidth,
      fixedHeight: absWidth * imgHeight / imgWidth,
      fixedWidths: [absWidth]
    };
  }
  if (absHeight) {
    return {
      fixedWidth: absHeight / imgHeight * imgWidth,
      fixedHeight: absHeight,
      fixedWidths: [absHeight / imgHeight * imgWidth]
    };
  }
  return {
    fixedWidth: imgWidth,
    fixedHeight: imgHeight,
    fixedWidths: defaultWidths
  };
};

// node_modules/@yext/pages/dist/components/link/link.js
var import_react6 = __toESM(require_react(), 1);
var import_classnames = __toESM(require_classnames(), 1);

// node_modules/@yext/pages/dist/components/link/methods.js
var getHref = (cta) => {
  if (cta.linkType === "Email" || !cta.linkType && isEmail(cta.link)) {
    return `mailto:${cta.link}`;
  }
  if (cta.linkType === "Phone") {
    return `tel:${cta.link}`;
  }
  return cta.link;
};
var isEmail = (string) => {
  const re = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
  return re.test(string);
};
var reverse = (string) => {
  let o = "";
  for (let i = string.length - 1; i >= 0; o += string[i--]) {
  }
  return o;
};
var isHREFProps = (props) => {
  return "href" in props;
};

// node_modules/@yext/pages/dist/components/link/link.js
var Link = import_react6.default.forwardRef(
  function Link2(props, ref) {
    const link = isHREFProps(props) ? { link: props.href } : props.cta;
    const { children, onClick, className, eventName, cta, ...rest } = props;
    const trackEvent = eventName ? eventName : cta ? "cta" : "link";
    const analytics = useAnalytics();
    const obfuscate = props.obfuscate || props.obfuscate !== false && isEmail(link.link);
    const [humanInteraction, setHumanInteraction] = (0, import_react6.useState)(false);
    const handleClick = async (e) => {
      setHumanInteraction(true);
      if (analytics !== null) {
        try {
          await analytics.trackClick(trackEvent, props.conversionDetails)(e);
        } catch (exception) {
          console.error("Failed to report click Analytics Event");
        }
      }
      if (onClick) {
        onClick(e);
      }
    };
    const useLinkAsLabel = !children && !link.label;
    const isObfuscate = !humanInteraction && obfuscate;
    const obfuscatedStyle = {
      ...props.style,
      unicodeBidi: "bidi-override",
      direction: useLinkAsLabel && isObfuscate ? "rtl" : "ltr"
    };
    const renderedLink = isObfuscate ? reverse(link.link) : link.link;
    return import_react6.default.createElement("a", {
      className: (0, import_classnames.default)("Link", className),
      href: humanInteraction || !obfuscate ? getHref(link) : "obfuscate",
      onClick: handleClick,
      rel: props.target && !props.rel ? "noopener" : void 0,
      ref,
      style: obfuscatedStyle,
      ...rest
    }, children || link.label || renderedLink);
  }
);

// node_modules/@yext/pages/dist/components/link/types.js
var LinkType = {
  URL: "URL",
  Email: "Email",
  Phone: "Phone"
};

// node_modules/@yext/pages/dist/components/map/map.js
var import_react7 = __toESM(require_react(), 1);
var import_classnames2 = __toESM(require_classnames(), 1);
var import_components_tsx_maps = __toESM(require_dist2(), 1);
var import_components_tsx_geo = __toESM(require_dist(), 1);
var MapContext = (0, import_react7.createContext)(null);
function useMapContext() {
  const ctx = (0, import_react7.useContext)(MapContext);
  if (!ctx || ctx.map === void 0) {
    throw new Error("Attempted to call useMapContext() outside of <Map>.");
  }
  return ctx.map;
}
var Map2 = ({
  apiKey,
  bounds,
  children,
  className,
  clientKey,
  controls,
  defaultCenter,
  defaultZoom,
  mapRef,
  padding,
  panStartHandler,
  panHandler,
  provider,
  providerOptions,
  singleZoom
}) => {
  const wrapper = (0, import_react7.useRef)(null);
  const [center, setCenter] = (0, import_react7.useState)(defaultCenter);
  const [loaded, setLoaded] = (0, import_react7.useState)(false);
  const [map, setMap] = (0, import_react7.useState)();
  const [zoom, setZoom] = (0, import_react7.useState)(defaultZoom);
  const _panHandler = (previous, current) => {
    panHandler(previous, current);
    setCenter(current.getCenter());
  };
  (0, import_react7.useEffect)(() => {
    if (!loaded || !map) {
      return;
    }
    setZoom(map.getZoom());
  }, [center]);
  (0, import_react7.useEffect)(() => {
    if (!bounds || !loaded || !map) {
      return;
    }
    const coordinates = bounds.map((bound) => new import_components_tsx_geo.Coordinate(bound));
    map.fitCoordinates(coordinates);
  }, [JSON.stringify(bounds), map]);
  (0, import_react7.useEffect)(() => {
    if (!loaded || map) {
      return;
    }
    const mapOptions = new import_components_tsx_maps.MapOptions().withControlEnabled(controls).withDefaultCenter(center).withDefaultZoom(zoom).withPadding(padding).withPanHandler(_panHandler).withPanStartHandler(panStartHandler).withProvider(provider).withProviderOptions(providerOptions).withSinglePinZoom(singleZoom).withWrapper(wrapper.current).build();
    setMap(mapOptions);
    if (mapRef) {
      mapRef.current = mapOptions;
    }
  }, [loaded]);
  (0, import_react7.useEffect)(() => {
    if (loaded || map || !wrapper.current) {
      return;
    }
    const useClientKey = provider.getProviderName() === "Google" && clientKey;
    provider.load(apiKey, useClientKey ? { client: clientKey } : {}).then(() => setLoaded(true));
  }, []);
  return import_react7.default.createElement("div", {
    className: (0, import_classnames2.default)(
      {
        "is-loaded": loaded
      },
      className
    ),
    id: "map",
    ref: wrapper,
    "data-testid": "map"
  }, map && import_react7.default.createElement(MapContext.Provider, {
    value: { map, provider }
  }, children));
};
Map2.defaultProps = {
  controls: true,
  defaultCenter: { latitude: 39.83, longitude: -98.58 },
  defaultZoom: 4,
  padding: { bottom: 50, left: 50, right: 50, top: 50 },
  panHandler: () => null,
  panStartHandler: () => null,
  provider: import_components_tsx_maps.GoogleMaps,
  singleZoom: 14
};

// node_modules/@yext/pages/dist/components/map/marker.js
var import_react8 = __toESM(require_react(), 1);
var import_react_dom = __toESM(require_react_dom(), 1);
var import_components_tsx_maps2 = __toESM(require_dist2(), 1);
var defaultMarkerIcon = import_react8.default.createElement("svg", {
  width: "30",
  height: "38",
  viewBox: "0 0 30 38",
  fill: "none",
  xmlns: "http://www.w3.org/2000/svg"
}, import_react8.default.createElement("path", {
  d: "M30 15.0882C30 23.4212 23.3333 30.7353 15 38C7.22222 31.2941 0 23.4212 0 15.0882C0 6.75523 6.71573 0 15 0C23.2843 0 30 6.75523 30 15.0882Z",
  fill: "red"
}));
var Marker = ({
  children,
  coordinate,
  hideOffscreen,
  id,
  icon,
  onClick,
  onFocus,
  onHover,
  zIndex
}) => {
  const { map, provider } = (0, import_react8.useContext)(MapContext);
  const marker = (0, import_react8.useMemo)(() => {
    return new import_components_tsx_maps2.MapPinOptions().withCoordinate(coordinate).withHideOffscreen(hideOffscreen).withProvider(provider).build();
  }, []);
  (0, import_react8.useEffect)(() => {
    if (zIndex !== 0 && !zIndex) {
      return;
    }
    const wrapper = marker.getProviderPin().getWrapperElement();
    wrapper.style.zIndex = zIndex;
  }, [zIndex]);
  (0, import_react8.useEffect)(() => {
    marker.setMap(map);
    marker.setClickHandler(() => onClick(id));
    marker.setFocusHandler((focused) => onFocus(focused, id));
    marker.setHoverHandler((hovered) => onHover(hovered, id));
    return () => {
      marker.setMap(null);
    };
  }, []);
  const elementToRender = children ? children : icon;
  if (elementToRender) {
    const pinEl = marker.getProviderPin().getPinElement();
    Object.assign(pinEl.style, {
      height: "auto",
      width: "auto",
      fontSize: 0
    });
    return (0, import_react_dom.createPortal)(elementToRender, pinEl);
  }
  return null;
};
Marker.defaultProps = {
  hideOffscreen: false,
  icon: defaultMarkerIcon,
  onClick: () => null,
  onHover: () => null,
  onFocus: () => null
};

// node_modules/@yext/pages/dist/components/locationmap/locationmap.js
var import_react9 = __toESM(require_react(), 1);
var import_components_tsx_maps3 = __toESM(require_dist2(), 1);
var LocationMap = ({
  children,
  coordinate,
  linkSameTab,
  pinUrl,
  onClick = () => null,
  onHover = () => null,
  onFocus = () => null,
  ...mapProps
}) => {
  return import_react9.default.createElement(Map2, {
    bounds: [coordinate],
    ...mapProps
  }, import_react9.default.createElement(Marker, {
    coordinate,
    id: "location-map-marker",
    onClick,
    onHover,
    onFocus
  }, pinUrl ? import_react9.default.createElement(Link, {
    href: pinUrl,
    target: linkSameTab ? "_self" : "_blank"
  }, children) : children ? children : void 0));
};
LocationMap.defaultProps = {
  controls: true,
  panHandler: () => null,
  provider: import_components_tsx_maps3.GoogleMaps,
  singleZoom: 16
};
export {
  Address,
  Analytics,
  AnalyticsContext,
  AnalyticsProvider,
  AnalyticsScopeProvider,
  Image,
  ImageLayoutOption,
  Link,
  LinkType,
  ListingPublisherOption,
  LocationMap,
  Map2 as Map,
  MapProviderOption,
  Marker,
  getDirections,
  useAnalytics,
  useIdentify,
  useMapContext,
  usePageView,
  useScope,
  useTrack
};
/*!
  Copyright (c) 2018 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
//# sourceMappingURL=@yext_pages_components.js.map
